name: >-
  container-prod_env_0c03e79f-f2ce-4dc1-8454-d3ed581782d9_app_0b5a845f-6194-4fd7-8ce1-8683dafc7d79
  Pipeline (Skyu Generated)
'on':
  push:
    tags:
      - v*
  workflow_dispatch: {}
  repository_dispatch:
    types: pipeline_d784b4e0-484e-4462-80db-27ea9b771b59
env:
  ENCODED_PIPELINE_SECRET: >-
    ${{secrets.TESTTHAMEERA3SKYUGITOPS5BE204F2_ENV_0C03E79FF2CE4DC18454D3ED581782D9_APP_0B5A845F61944FD78CE18683DAFC7D79_CONTAINERPROD_ENV_0C03E79FF2CE4DC18454D3ED581782D9_APP_0B5A845F61944FD78CE18683DAFC7D79}}
  IMAGE_TAG: ${{github.event.client_payload.commitId || github.sha}}
  IMAGE_NAME: skyu-gen-img
  DOCKER_FILE_PATH: Dockerfile
  DOCKER_BUILD_CONTEXT: .
  SCAN_SEVERITY: CRITICAL
  TRIVY_SCAN_EXIT_CODE: '1'
  REPOSITORY_NAME: hello
  DEPLOY_STEP_SHOULD_DEPLOY: 'true'
jobs:
  build:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Start
        run: >-
          echo " Starting GitHub Action!" && echo "IMAGE_EXISTS_IN_ECR=false" >>
          $GITHUB_ENV
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v2
      - name: 'Run :: Checkout Specific Commit'
        if: ${{ github.event.client_payload.commitId != null }}
        run: git checkout ${{ github.event.client_payload.commitId }}
      - name: 'Run :: Decoding Secrets'
        run: >-
          echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r
          'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo
          "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
      - name: 'Run :: Login to Dockerhub'
        run: >-
          echo "${{ env.DOCKER_PASSWORD }}" | docker login -u "${{
          env.DOCKER_USERNAME }}" --password-stdin docker.io
      - name: 'Run :: Check if image already exists'
        id: check-image-existence-step-id
        run: |2-

              if docker pull ${{ env.registryURL }}/${{env.REPOSITORY_NAME}}:${{env.IMAGE_TAG}} >/dev/null 2>&1; 
              then
                echo "Image exists in registry."
                echo "IMAGE_EXISTS_IN_ECR=true" >> $GITHUB_ENV
              else
                echo "Image does not exist in registry."
                echo "IMAGE_EXISTS_IN_ECR=false" >> $GITHUB_ENV
              fi
              
      - name: 'Run :: Build With Docker'
        run: >-
          docker build -t ${{ env.registryURL }}/${{env.REPOSITORY_NAME}}:${{
          env.IMAGE_TAG }} -f ${{env.DOCKER_FILE_PATH}}
          ${{env.DOCKER_BUILD_CONTEXT}}
        if: ${{ env.IMAGE_EXISTS_IN_ECR == 'false' }}
      - name: 'Run :: Trivy vulnerability scanner'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.registryURL }}/${{env.REPOSITORY_NAME}}:${{ env.IMAGE_TAG }}
          format: table
          output: trivy-results.json
          exit-code: ${{env.TRIVY_SCAN_EXIT_CODE}}
          ignore-unfixed: true
          vuln-type: os,library
          severity: ${{env.SCAN_SEVERITY}}
        if: ${{ env.IMAGE_EXISTS_IN_ECR == 'false' }}
      - name: 'Run :: Build, tag, and push image'
        run: >-
          docker push ${{ env.registryURL }}/${{env.REPOSITORY_NAME}}:${{
          env.IMAGE_TAG }}
        if: ${{ env.IMAGE_EXISTS_IN_ECR == 'false' }}
      - name: 'Run :: Deploy and Notify Resource Service'
        run: |2-

              response=$(curl -d "imageRegistryURL=${{ env.registryURL }}/${{env.REPOSITORY_NAME}}&appVersionId=${{ env.DEPLOYMENT_APP_VERSION_ID }}&tag=${{ env.IMAGE_TAG }}&containerName=${{ env.DEPLOYMENT_CONTAINER_NAME }}&shouldDeploy=${{env.DEPLOY_STEP_SHOULD_DEPLOY}}&pipelineRunId=${{ github.run_id }}&commitDetails[commitHash]=${{ github.sha }}&commitDetails[commitAvatar]=https://github.com/${{ github.event.head_commit.author.name }}.png&commitDetails[commitTime]=${{ github.event.head_commit.timestamp }}&commitDetails[commitMessage]=\"${{ github.event.head_commit.message }}\"&commitDetails[commitUser]=${{ github.event.head_commit.author.name }}" -X PATCH -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.DEPLOYMENT_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.DEPLOYMENT_PROJECT_ID }}' -H 'x-environment-id: ${{ env.DEPLOYMENT_ENVIRONMENT_ID }}' -H 'x-application-id: ${{ env.DEPLOYMENT_APPLICATION_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded' 'https://api.dev.skyu.io/resource-service/applications/deploy')
              status_code=$?

              if [ $status_code -eq 0 ]; then
                if echo "$response" | grep -q '"success":true'; then
                  echo "SUCCESS :: $response"
                else
                  echo "FAILED :: $response"
                  exit 1
                fi
              else
                echo "Failed to deploy. HTTP status code: $status_code"
                exit 1
              fi
            
